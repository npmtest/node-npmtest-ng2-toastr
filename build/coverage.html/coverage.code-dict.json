{"/home/travis/build/npmtest/node-npmtest-ng2-toastr/test.js":"/* istanbul instrument in package npmtest_ng2_toastr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-toastr/lib.npmtest_ng2_toastr.js":"/* istanbul instrument in package npmtest_ng2_toastr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ng2_toastr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ng2_toastr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-toastr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ng2-toastr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ng2_toastr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ng2_toastr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ng2_toastr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ng2_toastr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ng2_toastr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ng2_toastr.__dirname + '/lib.npmtest_ng2_toastr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/ng2-toastr.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar toast_1 = require(\"./src/toast\");\nexports.Toast = toast_1.Toast;\nvar toast_manager_1 = require(\"./src/toast-manager\");\nexports.ToastsManager = toast_manager_1.ToastsManager;\nvar toast_container_component_1 = require(\"./src/toast-container.component\");\nexports.ToastContainer = toast_container_component_1.ToastContainer;\nvar toast_options_1 = require(\"./src/toast-options\");\nexports.ToastOptions = toast_options_1.ToastOptions;\nvar toast_module_1 = require(\"./src/toast.module\");\nexports.ToastModule = toast_module_1.ToastModule;\n//# sourceMappingURL=ng2-toastr.js.map","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/src/toast.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Toast = (function () {\n    function Toast(type, message, title, data) {\n        this.type = type;\n        this.message = message;\n        this.title = title;\n        this.data = data;\n        this.config = {\n            dismiss: 'auto',\n            enableHTML: false,\n            titleClass: '',\n            messageClass: '',\n            toastLife: 3000,\n            showCloseButton: false,\n        };\n    }\n    return Toast;\n}());\nexports.Toast = Toast;\n//# sourceMappingURL=toast.js.map","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/src/toast-manager.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar toast_container_component_1 = require(\"./toast-container.component\");\nvar toast_options_1 = require(\"./toast-options\");\nvar toast_1 = require(\"./toast\");\nvar Subject_1 = require(\"rxjs/Subject\");\nvar ToastsManager = (function () {\n    function ToastsManager(componentFactoryResolver, appRef, options) {\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.appRef = appRef;\n        this.options = options;\n        this.index = 0;\n        this.toastClicked = new Subject_1.Subject();\n    }\n    ToastsManager.prototype.setRootViewContainerRef = function (vRef) {\n        this._rootViewContainerRef = vRef;\n    };\n    ToastsManager.prototype.onClickToast = function () {\n        return this.toastClicked.asObservable();\n    };\n    ToastsManager.prototype.show = function (toast, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.container) {\n                // get app root view component ref\n                if (!_this._rootViewContainerRef) {\n                    try {\n                        _this._rootViewContainerRef = _this.appRef['_rootComponents'][0]['_hostElement'].vcRef;\n                    }\n                    catch (e) {\n                        reject(new Error('Please set root ViewContainerRef using setRootViewContainerRef(vRef: ViewContainerRef) method.'));\n                    }\n                }\n                // get options providers\n                var providers = core_1.ReflectiveInjector.resolve([\n                    { provide: toast_options_1.ToastOptions, useValue: _this.options }\n                ]);\n                // create and load ToastContainer\n                var toastFactory = _this.componentFactoryResolver.resolveComponentFactory(toast_container_component_1.ToastContainer);\n                var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers, _this._rootViewContainerRef.parentInjector);\n                _this.container = _this._rootViewContainerRef.createComponent(toastFactory, _this._rootViewContainerRef.length, childInjector);\n                _this.container.instance.onToastClicked = function (toast) {\n                    _this._onToastClicked(toast);\n                };\n                _this.container.instance.onExit().subscribe(function () {\n                    _this.dispose();\n                });\n            }\n            resolve(_this.setupToast(toast, options));\n        });\n    };\n    ToastsManager.prototype.createTimeout = function (toast) {\n        var _this = this;\n        var task = setTimeout(function () {\n            _this.clearToast(toast);\n        }, toast.config.toastLife);\n        return task.toString();\n    };\n    ToastsManager.prototype.setupToast = function (toast, options) {\n        toast.id = ++this.index;\n        if (options && options.hasOwnProperty('toastLife')) {\n            options.dismiss = 'auto';\n        }\n        var customConfig = Object.assign({}, this.options, options || {});\n        Object.keys(toast.config).forEach(function (k) {\n            if (customConfig.hasOwnProperty(k)) {\n                toast.config[k] = customConfig[k];\n            }\n        });\n        if (toast.config.dismiss === 'auto') {\n            toast.timeoutId = this.createTimeout(toast);\n        }\n        this.container.instance.addToast(toast);\n        return toast;\n    };\n    ToastsManager.prototype._onToastClicked = function (toast) {\n        this.toastClicked.next(toast);\n        if (toast.config.dismiss === 'click') {\n            this.clearToast(toast);\n        }\n    };\n    ToastsManager.prototype.dismissToast = function (toast) {\n        this.clearToast(toast);\n    };\n    ToastsManager.prototype.clearToast = function (toast) {\n        if (this.container) {\n            var instance = this.container.instance;\n            instance.removeToast(toast);\n        }\n    };\n    ToastsManager.prototype.clearAllToasts = function () {\n        if (this.container) {\n            var instance = this.container.instance;\n            instance.removeAllToasts();\n            this.dispose();\n        }\n    };\n    ToastsManager.prototype.dispose = function () {\n        this.container.destroy();\n        this.container = null;\n    };\n    ToastsManager.prototype.error = function (message, title, options) {\n        var data = options && options.data ? options.data : null;\n        var toast = new toast_1.Toast('error', message, title, data);\n        return this.show(toast, options);\n    };\n    ToastsManager.prototype.info = function (message, title, options) {\n        var data = options && options.data ? options.data : null;\n        var toast = new toast_1.Toast('info', message, title, data);\n        return this.show(toast, options);\n    };\n    ToastsManager.prototype.success = function (message, title, options) {\n        var data = options && options.data ? options.data : null;\n        var toast = new toast_1.Toast('success', message, title, data);\n        return this.show(toast, options);\n    };\n    ToastsManager.prototype.warning = function (message, title, options) {\n        var data = options && options.data ? options.data : null;\n        var toast = new toast_1.Toast('warning', message, title, data);\n        return this.show(toast, options);\n    };\n    // allow user define custom background color and image\n    ToastsManager.prototype.custom = function (message, title, options) {\n        var data = options && options.data ? options.data : null;\n        var toast = new toast_1.Toast('custom', message, title, data);\n        return this.show(toast, options);\n    };\n    return ToastsManager;\n}());\nToastsManager.decorators = [\n    { type: core_1.Injectable },\n];\n/** @nocollapse */\nToastsManager.ctorParameters = function () { return [\n    { type: core_1.ComponentFactoryResolver, },\n    { type: core_1.ApplicationRef, },\n    { type: toast_options_1.ToastOptions, },\n]; };\nexports.ToastsManager = ToastsManager;\n//# sourceMappingURL=toast-manager.js.map","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/gulpfile.js":"var gulp = require('gulp');\n\ngulp.paths = {\n  tssrc: [\n    '**/*.ts',\n    '!node_modules/**/*',\n    '!bundles/**/*',\n    '!typings/**/*',\n  ],\n};\n\nrequire('require-dir')('./gulp-tasks');\n\nvar clean = require('gulp-rimraf');\ngulp.task('clean', function () {\n  return gulp.src('bundles', {read: false})\n    .pipe(clean());\n});\n\nvar nano = require('gulp-cssnano');\nvar rename = require('gulp-rename');\n\ngulp.task('bundle-css', function() {\n  return gulp.src('./*.css')\n    .pipe(nano({zindex: false}))\n    .pipe(rename({extname: '.min.css'}))\n    .pipe(gulp.dest('bundles'));\n});\n\ngulp.task('default', function () {\n  gulp.start('lint');\n});\n","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/make.js":"#!/usr/bin/env node\n'use strict';\n\n/*eslint no-console: 0, no-sync: 0*/\n\n// System.js bundler\n// simple and yet reusable system.js bundler\n// bundles, minifies and gzips\n\nconst fs = require('fs');\nconst del = require('del');\nconst path = require('path');\nconst zlib = require('zlib');\nconst async = require('async');\nconst Builder = require('systemjs-builder');\n\nconst pkg = require('./package.json');\nconst name = pkg.name;\nconst targetFolder = path.resolve('./bundles');\nconsole.log(targetFolder)\nasync.waterfall([\n  cleanBundlesFolder,\n  getSystemJsBundleConfig,\n  buildSystemJs({minify: false, sourceMaps: true, mangle: false}),\n  getSystemJsBundleConfig,\n  buildSystemJs({minify: true, sourceMaps: true, mangle: false}),\n  gzipSystemJsBundle\n], err => {\n  if (err) {\n    throw err;\n  }\n});\n\nfunction getSystemJsBundleConfig(cb) {\n  const config = {\n    baseURL: '..',\n    transpiler: 'typescript',\n    typescriptOptions: {\n      module: 'cjs'\n    },\n    map: {\n      typescript: path.resolve('node_modules/typescript/lib/typescript.js'),\n      '@angular': path.resolve('node_modules/@angular'),\n      rxjs: path.resolve('node_modules/rxjs')\n    },\n    paths: {\n      '*': '*.js'\n    }\n  };\n\n  config.meta = ['@angular', 'rxjs'].reduce((memo, currentValue) => {\n    memo[path.resolve(`node_modules/${currentValue}/*`)] = {build: false};\n    return memo;\n  }, {});\n  config.meta.moment = {build: false};\n  console.log(config.meta)\n  return cb(null, config);\n}\n\nfunction cleanBundlesFolder(cb) {\n  return del(targetFolder)\n    .then(paths => {\n      console.log('Deleted files and folders:\\n', paths.join('\\n'));\n      cb();\n    });\n}\n\nfunction buildSystemJs(options) {\n  return (config, cb) => {\n    const minPostFix = options && options.minify ? '.min' : '';\n    const fileName = `${name}${minPostFix}.js`;\n    const dest = path.resolve(__dirname, targetFolder, fileName);\n    const builder = new Builder();\n\n    console.log('Bundling system.js file:', fileName, options);\n    builder.config(config);\n    return builder\n      .bundle([name, name].join('/'), dest, options)\n      .then(() => cb())\n      .catch(cb);\n  };\n}\n\nfunction gzipSystemJsBundle(cb) {\n  const files = fs\n    .readdirSync(path.resolve(targetFolder))\n    .map(file => path.resolve(targetFolder, file))\n    .filter(file => fs.statSync(file).isFile())\n    .filter(file => path.extname(file) !== 'gz');\n\n  return async.eachSeries(files, (file, gzipcb) => {\n    process.nextTick(() => {\n      console.log('Gzipping ', file);\n      const gzip = zlib.createGzip({level: 9});\n      const inp = fs.createReadStream(file);\n      const out = fs.createWriteStream(`${file}.gz`);\n\n      inp.on('end', () => gzipcb());\n      inp.on('error', err => gzipcb(err));\n      return inp.pipe(gzip).pipe(out);\n    });\n  }, cb);\n}","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/src/toast-container.component.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar toast_options_1 = require(\"./toast-options\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nrequire(\"rxjs/add/operator/first\");\nvar Subject_1 = require(\"rxjs/Subject\");\nvar ToastContainer = (function () {\n    function ToastContainer(sanitizer, cdr, _zone, options) {\n        this.sanitizer = sanitizer;\n        this.cdr = cdr;\n        this._zone = _zone;\n        this.position = 'fixed';\n        this.toasts = [];\n        this._fresh = true;\n        this._onEnter = new Subject_1.Subject();\n        this._onExit = new Subject_1.Subject();\n        Object.assign(this, options);\n    }\n    ToastContainer.prototype.onEnter = function () {\n        return this._onEnter.asObservable();\n    };\n    ToastContainer.prototype.onExit = function () {\n        return this._onExit.asObservable();\n    };\n    ToastContainer.prototype.addToast = function (toast) {\n        if (this.positionClass.indexOf('top') > 0) {\n            if (this.newestOnTop) {\n                this.toasts.unshift(toast);\n            }\n            else {\n                this.toasts.push(toast);\n            }\n            if (this.toasts.length > this.maxShown) {\n                var diff = this.toasts.length - this.maxShown;\n                if (this.newestOnTop) {\n                    this.toasts.splice(this.maxShown);\n                }\n                else {\n                    this.toasts.splice(0, diff);\n                }\n            }\n        }\n        else {\n            this.toasts.unshift(toast);\n            if (this.toasts.length > this.maxShown) {\n                this.toasts.splice(this.maxShown);\n            }\n        }\n        if (this.animate === null && this._fresh) {\n            this._fresh = false;\n            this._onEnter.next();\n            this._onEnter.complete();\n        }\n        this.cdr.detectChanges();\n    };\n    ToastContainer.prototype.removeToast = function (toast) {\n        if (toast.timeoutId) {\n            clearTimeout(toast.timeoutId);\n            toast.timeoutId = null;\n        }\n        this.toasts = this.toasts.filter(function (t) {\n            return t.id !== toast.id;\n        });\n    };\n    ToastContainer.prototype.removeAllToasts = function () {\n        this.toasts = [];\n    };\n    ToastContainer.prototype.clicked = function (toast) {\n        if (this.onToastClicked) {\n            this.onToastClicked(toast);\n        }\n    };\n    ToastContainer.prototype.anyToast = function () {\n        return this.toasts.length > 0;\n    };\n    ToastContainer.prototype.findToast = function (toastId) {\n        for (var _i = 0, _a = this.toasts; _i < _a.length; _i++) {\n            var toast = _a[_i];\n            if (toast.id === toastId) {\n                return toast;\n            }\n        }\n        return null;\n    };\n    ToastContainer.prototype.onAnimationEnd = function (event) {\n        var _this = this;\n        if (event.toState === 'void' && !this.anyToast()) {\n            this._ngExit();\n        }\n        else if (this._fresh && event.fromState === 'void') {\n            // notify when first animation is done\n            this._fresh = false;\n            this._zone.run(function () {\n                _this._onEnter.next();\n                _this._onEnter.complete();\n            });\n        }\n    };\n    ToastContainer.prototype._ngExit = function () {\n        var _this = this;\n        this._zone.onMicrotaskEmpty.first().subscribe(function () {\n            _this._onExit.next();\n            _this._onExit.complete();\n        });\n    };\n    ToastContainer.prototype.ngOnDestroy = function () {\n        this._ngExit();\n    };\n    return ToastContainer;\n}());\nToastContainer.decorators = [\n    { type: core_1.Component, args: [{\n                selector: 'toast-container',\n                template: \"\\n    <div #toastContainer id=\\\"toast-container\\\" [style.position]=\\\"position\\\" class=\\\"{{positionClass}}\\\">\\n      <div *ngFor=\\\"let toast of toasts\\\" [@inOut]=\\\"animate\\\" (@inOut.done)=\\\"onAnimationEnd($event)\\\" class=\\\"toast toast-{{toast.type}}\\\" \\n      (click)=\\\"clicked(toast)\\\">\\n        <div class=\\\"toast-close-button\\\" *ngIf=\\\"toast.config.showCloseButton\\\" (click)=\\\"removeToast(toast)\\\">&times;\\n        </div> \\n        <div *ngIf=\\\"toast.title\\\" class=\\\"{{toast.config.titleClass || titleClass}}\\\">{{toast.title}}</div>\\n        <div [ngSwitch]=\\\"toast.config.enableHTML\\\">\\n          <span *ngSwitchCase=\\\"true\\\" [innerHTML]=\\\"sanitizer.bypassSecurityTrustHtml(toast.message)\\\"></span>\\n          <span *ngSwitchDefault class=\\\"{{toast.config.messageClass || messageClass}}\\\">{{toast.message}}</span>\\n        </div>             \\n      </div>\\n    </div>\\n    \",\n                animations: [\n                    animations_1.trigger('inOut', [\n                        animations_1.state('flyRight, flyLeft', animations_1.style({ opacity: 1, transform: 'translateX(0)' })),\n                        animations_1.state('fade', animations_1.style({ opacity: 1 })),\n                        animations_1.state('slideDown, slideUp', animations_1.style({ opacity: 1, transform: 'translateY(0)' })),\n                        animations_1.transition('void => flyRight', [\n                            animations_1.style({\n                                opacity: 0,\n                                transform: 'translateX(100%)'\n                            }),\n                            animations_1.animate('0.2s ease-in')\n                        ]),\n                        animations_1.transition('flyRight => void', [\n                            animations_1.animate('0.2s 10ms ease-out', animations_1.style({\n                                opacity: 0,\n                                transform: 'translateX(100%)'\n                            }))\n                        ]),\n                        animations_1.transition('void => flyLeft', [\n                            animations_1.style({\n                                opacity: 0,\n                                transform: 'translateX(-100%)'\n                            }),\n                            animations_1.animate('0.2s ease-in')\n                        ]),\n                        animations_1.transition('flyLeft => void', [\n                            animations_1.animate('0.2s 10ms ease-out', animations_1.style({\n                                opacity: 0,\n                                transform: 'translateX(-100%)'\n                            }))\n                        ]),\n                        animations_1.transition('void => fade', [\n                            animations_1.style({\n                                opacity: 0,\n                            }),\n                            animations_1.animate('0.3s ease-in')\n                        ]),\n                        animations_1.transition('fade => void', [\n                            animations_1.animate('0.3s 10ms ease-out', animations_1.style({\n                                opacity: 0,\n                            }))\n                        ]),\n                        animations_1.transition('void => slideDown', [\n                            animations_1.style({\n                                opacity: 0,\n                                transform: 'translateY(-200%)'\n                            }),\n                            animations_1.animate('0.3s ease-in')\n                        ]),\n                        animations_1.transition('slideDown => void', [\n                            animations_1.animate('0.3s 10ms ease-out', animations_1.style({\n                                opacity: 0,\n                                transform: 'translateY(-200%)'\n                            }))\n                        ]),\n                        animations_1.transition('void => slideUp', [\n                            animations_1.style({\n                                opacity: 0,\n                                transform: 'translateY(200%)'\n                            }),\n                            animations_1.animate('0.3s ease-in')\n                        ]),\n                        animations_1.transition('slideUp => void', [\n                            animations_1.animate('0.3s 10ms ease-out', animations_1.style({\n                                opacity: 0,\n                                transform: 'translateY(200%)'\n                            }))\n                        ]),\n                    ]),\n                ],\n            },] },\n];\n/** @nocollapse */\nToastContainer.ctorParameters = function () { return [\n    { type: platform_browser_1.DomSanitizer, },\n    { type: core_1.ChangeDetectorRef, },\n    { type: core_1.NgZone, },\n    { type: toast_options_1.ToastOptions, },\n]; };\nexports.ToastContainer = ToastContainer;\n//# sourceMappingURL=toast-container.component.js.map","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/src/toast.module.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar toast_container_component_1 = require(\"./toast-container.component\");\nvar toast_manager_1 = require(\"./toast-manager\");\nvar toast_options_1 = require(\"./toast-options\");\nvar ToastModule = (function () {\n    function ToastModule() {\n    }\n    ToastModule.forRoot = function () {\n        return {\n            ngModule: ToastModule,\n            providers: [toast_manager_1.ToastsManager, toast_options_1.ToastOptions],\n        };\n    };\n    return ToastModule;\n}());\nToastModule.decorators = [\n    { type: core_1.NgModule, args: [{\n                imports: [common_1.CommonModule],\n                declarations: [toast_container_component_1.ToastContainer],\n                exports: [toast_container_component_1.ToastContainer],\n                entryComponents: [toast_container_component_1.ToastContainer]\n            },] },\n];\n/** @nocollapse */\nToastModule.ctorParameters = function () { return []; };\nexports.ToastModule = ToastModule;\n//# sourceMappingURL=toast.module.js.map","/home/travis/build/npmtest/node-npmtest-ng2-toastr/node_modules/ng2-toastr/src/toast-options.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ToastOptions = (function () {\n    function ToastOptions() {\n        this.positionClass = 'toast-top-right';\n        this.maxShown = 5;\n        this.newestOnTop = false;\n        this.animate = 'fade';\n        // override-able properties\n        this.toastLife = 5000;\n        this.enableHTML = false;\n        this.dismiss = 'auto'; //'auto' | 'click' | 'controlled'\n        this.messageClass = 'toast-message';\n        this.titleClass = 'toast-title';\n        this.showCloseButton = false;\n    }\n    return ToastOptions;\n}());\nToastOptions.decorators = [\n    { type: core_1.Injectable },\n];\n/** @nocollapse */\nToastOptions.ctorParameters = function () { return []; };\nexports.ToastOptions = ToastOptions;\n//# sourceMappingURL=toast-options.js.map"}